package com.cricket.ncasports.service;

import com.cricket.ncasports.dto.ScoreDTO;
import com.cricket.ncasports.model.Match;
import com.cricket.ncasports.model.Score;
import com.cricket.ncasports.repository.MatchRepository;
import com.cricket.ncasports.repository.ScoreRepository;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ScoreService {

    @Autowired
    private MatchRepository matchRepository;

    @Autowired
    private ScoreRepository scoreRepository;

    @Autowired
    private ScoreUpdateService scoreUpdateService;

    // Retrieve score by matchId
    public ScoreDTO getScoreByMatchId(Long matchId) {
        Optional<Score> optionalScore = scoreRepository.findByMatchId(matchId);

        // Check if score exists; if so, return the DTO with required data, else return default values.
        if (optionalScore.isPresent()) {
            Score score = optionalScore.get();
            // If wickets and overs are not set (i.e., old data), set them to default values
            int teamAWickets = (score.getTeamAWickets() != null) ? score.getTeamAWickets() : 0;
            int teamBWickets = (score.getTeamBWickets() != null) ? score.getTeamBWickets() : 0;
            double teamAOvers = (score.getTeamAOvers() != null) ? score.getTeamAOvers() : 0.0;
            double teamBOvers = (score.getTeamBOvers() != null) ? score.getTeamBOvers() : 0.0;

            // Convert the Score entity to ScoreDTO
            return new ScoreDTO(
                    score.getMatch().getId(),
                    score.getMatch().getTeamA(),
                    score.getMatch().getTeamB(),
                    score.getTeamAScore(),
                    score.getTeamBScore(),
                    score.getWinner(),
                    teamAWickets,
                    teamBWickets,
                    teamAOvers,
                    teamBOvers
            );
        } else {
            // If the score doesn't exist for the match, return null
            return null;
        }
    }

    // Create a new score for a match
    public ScoreDTO createScore(ScoreDTO scoreDTO) {
        Match match = matchRepository.findById(scoreDTO.getMatchId())
                .orElseThrow(() -> new IllegalArgumentException("Match not found"));

        Score score = new Score();
        score.setMatch(match);
        score.setTeamAScore(scoreDTO.getTeamAScore());
        score.setTeamBScore(scoreDTO.getTeamBScore());
        score.setWinner(scoreDTO.getWinner());

        // Set default values for overs and wickets if not provided
        score.setTeamAWickets(scoreDTO.getTeamAWickets() != null ? scoreDTO.getTeamAWickets() : 0);
        score.setTeamBWickets(scoreDTO.getTeamBWickets() != null ? scoreDTO.getTeamBWickets() : 0);
        score.setTeamAOvers(scoreDTO.getTeamAOvers() != null ? scoreDTO.getTeamAOvers() : 0.0);
        score.setTeamBOvers(scoreDTO.getTeamBOvers() != null ? scoreDTO.getTeamBOvers() : 0.0);

        score = scoreRepository.save(score);

        // Use convertToScoreDTO to create the ScoreDTO
        ScoreDTO createdScoreDTO = convertToScoreDTO(score);

        // Send the score update to WebSocket topic
        scoreUpdateService.sendScoreUpdate(createdScoreDTO);

        return createdScoreDTO;
    }

    // Update score for a specific match
    public ScoreDTO updateScore(ScoreDTO scoreDTO) {
        // Find the match by matchId
        Match match = matchRepository.findById(scoreDTO.getMatchId())
                .orElseThrow(() -> new IllegalArgumentException("Match not found"));

        // Find the score entry by the match
        Score score = scoreRepository.findByMatch(match)
                .orElseThrow(() -> new IllegalArgumentException("Score not found"));

        // Update only score details; do not modify teamA and teamB since they come from Match
        score.setTeamAScore(scoreDTO.getTeamAScore());
        score.setTeamBScore(scoreDTO.getTeamBScore());
        score.setWinner(scoreDTO.getWinner());

        // Set default values for overs and wickets if not provided
        score.setTeamAWickets(scoreDTO.getTeamAWickets() != null ? scoreDTO.getTeamAWickets() : 0);
        score.setTeamBWickets(scoreDTO.getTeamBWickets() != null ? scoreDTO.getTeamBWickets() : 0);
        score.setTeamAOvers(scoreDTO.getTeamAOvers() != null ? scoreDTO.getTeamAOvers() : 0.0);
        score.setTeamBOvers(scoreDTO.getTeamBOvers() != null ? scoreDTO.getTeamBOvers() : 0.0);

        // Save updated score
        score = scoreRepository.save(score);

        // Use convertToScoreDTO to create the updated ScoreDTO
        ScoreDTO updatedScoreDTO = convertToScoreDTO(score);

        // Send the score update to WebSocket topic
        scoreUpdateService.sendScoreUpdate(updatedScoreDTO);

        return updatedScoreDTO;
    }

    // Convert Score entity to ScoreDTO
    private ScoreDTO convertToScoreDTO(Score score) {
        ScoreDTO scoreDTO = new ScoreDTO();
        scoreDTO.setMatchId(score.getMatch().getId());
        scoreDTO.setTeamA(score.getMatch().getTeamA());  
        scoreDTO.setTeamB(score.getMatch().getTeamB()); 
        scoreDTO.setTeamAScore(score.getTeamAScore());
        scoreDTO.setTeamBScore(score.getTeamBScore());
        scoreDTO.setWinner(score.getWinner());

        // Set default values for overs and wickets if null (for older records)
        scoreDTO.setTeamAWickets(score.getTeamAWickets() != null ? score.getTeamAWickets() : 0);
        scoreDTO.setTeamBWickets(score.getTeamBWickets() != null ? score.getTeamBWickets() : 0);
        scoreDTO.setTeamAOvers(score.getTeamAOvers() != null ? score.getTeamAOvers() : 0.0);
        scoreDTO.setTeamBOvers(score.getTeamBOvers() != null ? score.getTeamBOvers() : 0.0);

        return scoreDTO;
    }
}
