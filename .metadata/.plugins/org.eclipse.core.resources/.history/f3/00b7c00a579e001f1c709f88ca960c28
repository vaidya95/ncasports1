@RestController
@RequestMapping("/api/tournaments")
public class TournamentController {

    private final TournamentService tournamentService;

    @Autowired
    public TournamentController(TournamentService tournamentService) {
        this.tournamentService = tournamentService;
    }

    // Get all tournaments
    @GetMapping
    public List<TournamentDTO> getAllTournaments() {
        return tournamentService.getAllTournamentsAsDTO();
    }

    // Get tournament by ID
    @GetMapping("/{id}")
    public ResponseEntity<TournamentDTO> getTournamentById(@PathVariable Long id) {
        Optional<TournamentDTO> tournamentDTO = tournamentService.getTournamentById(id);
        return tournamentDTO.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());
    }

    // Create a new tournament
    @PostMapping
    public ResponseEntity<TournamentDTO> createTournament(@RequestBody Tournament tournament) {
        TournamentDTO createdTournamentDTO = tournamentService.createTournament(tournament);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdTournamentDTO);
    }

    // Delete a tournament by ID
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteTournament(@PathVariable Long id) {
        tournamentService.deleteTournament(id);
        return ResponseEntity.noContent().build();
    }
}
