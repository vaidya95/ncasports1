package com.example.ncasports.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;
import org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.server.standard.ServerEndpointExporter;

@Configuration
@EnableWebSocketMessageBroker  // Enables WebSocket support with message broker (STOMP)
public class WebSocketConfig implements WebSocketConfigurer {

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
        // Register WebSocket handler (for custom WebSocket endpoints)
        registry.addHandler(new MyWebSocketHandler(), "/ws")
                .setAllowedOrigins("http://localhost:3000")  // Allow connections from the frontend
                .addInterceptors(new HttpSessionHandshakeInterceptor());  // Optional: For session handling

        // Optional: If you want to add SockJS fallback
        registry.addHandler(new MyWebSocketHandler(), "/ws")
                .setAllowedOrigins("http://localhost:3000")
                .withSockJS();  // Allow SockJS as a fallback for browsers that don't support WebSocket
    }

    // Optional: Enables SockJS fallback for WebSocket clients
    @Bean
    public ServerEndpointExporter serverEndpointExporter() {
        return new ServerEndpointExporter();
    }

    @Override
    public void configureMessageBroker(MessageBrokerRegistry registry) {
        // Configure the message broker for STOMP (if you're using it)
        registry.setApplicationDestinationPrefixes("/app"); // Prefix for sending messages from the client
        registry.enableSimpleBroker("/topic"); // Prefix for broadcast messages (for example, updates)

        // Optional: Configure a custom destination prefix for messages
        registry.setUserDestinationPrefix("/user");
    }

    // WebSocket handler for custom WebSocket endpoint (for STOMP or non-STOMP use)
    public class MyWebSocketHandler implements WebSocketHandler {
        @Override
        public void afterConnectionEstablished(WebSocketSession session) throws Exception {
            // Handle when WebSocket connection is established
            System.out.println("WebSocket connection established: " + session.getId());
        }

        @Override
        public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {
            // Handle incoming WebSocket messages
            System.out.println("Received message: " + message.getPayload());
        }

        @Override
        public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {
            // Handle WebSocket transport errors
            exception.printStackTrace();
        }

        @Override
        public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
            // Handle when WebSocket connection is closed
            System.out.println("WebSocket connection closed: " + session.getId());
        }

        @Override
        public boolean supportsPartialMessages() {
            // Specify whether the WebSocket supports partial messages
            return false;
        }
    }
}
