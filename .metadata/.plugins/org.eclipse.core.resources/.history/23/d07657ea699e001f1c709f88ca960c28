package com.cricket.ncasports.service;

import com.cricket.ncasports.dto.MatchDTO;
import com.cricket.ncasports.model.Match;
import com.cricket.ncasports.model.Tournament;
import com.cricket.ncasports.repository.MatchRepository;
import com.cricket.ncasports.repository.TournamentRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class MatchService {

    private final MatchRepository matchRepository;
    private final TournamentRepository tournamentRepository;
    private final MatchDTO matchDTO;

    @Autowired
    public MatchService(MatchRepository matchRepository, TournamentRepository tournamentRepository, MatchDTO matchDTO) {
        this.matchRepository = matchRepository;
        this.tournamentRepository = tournamentRepository; // Inject the TournamentRepository
        this.matchDTO=matchDTO;
    }

    /**
     * Get all matches as MatchDTO
     * 
     * @return List of MatchDTO
     */
    public List<MatchDTO> getAllMatchesAsDTO() {
        return matchRepository.findAll().stream()
                .map(this::convertToMatchDTO)
                .collect(Collectors.toList());
    }

    /**
     * Get match by ID
     * 
     * @param id Match ID
     * @return MatchDTO if found, Optional.empty() otherwise
     */
    public Optional<MatchDTO> getMatchById(Long id) {
        Optional<Match> match = matchRepository.findById(id);
        return match.map(this::convertToMatchDTO);
    }

    /**
     * Create a new match and return MatchDTO
     * 
     * @param match Match entity to create
     * @return Created match as MatchDTO
     */
    public MatchDTO createMatch(Match match) {
    	// Retrieve the Tournament using the tournamentId from matchDTO
        Optional<Tournament> tournament = tournamentRepository.findById(matchDTO.getTournamentId());
        
        if (tournament.isEmpty()) {
            throw new IllegalArgumentException("Tournament ID is required");
        }

        // Create a new Match entity
        Match match2 = new Match();
        match.setTeamA(matchDTO.getTeamA());
        match.setTeamB(matchDTO.getTeamB());
        match.setScheduledDate(matchDTO.getScheduledDate());
        match.setTournament(tournament.get());  // Associate Tournament

        // Save the match and return the created MatchDTO
        match = matchRepository.save(match);
        return convertToMatchDTO(match);  // Convert and return MatchDTO
    }

    /**
     * Delete match by ID
     * 
     * @param id Match ID
     */
    public void deleteMatch(Long id) {
        matchRepository.deleteById(id);
    }

    /**
     * Convert Match entity to MatchDTO
     * 
     * @param match Match entity
     * @return MatchDTO
     */
    public MatchDTO convertToMatchDTO(Match match) {
        // Map Match entity fields to MatchDTO fields
        MatchDTO matchDTO = new MatchDTO();
        matchDTO.setId(match.getId());
        matchDTO.setTeamA(match.getTeamA());
        matchDTO.setTeamB(match.getTeamB());
        matchDTO.setScheduledDate(match.getScheduledDate());

        // Safely set tournamentId and tournamentName (may be null if no tournament)
        if (match.getTournament() != null) {
            matchDTO.setTournamentId(match.getTournament().getId());
            matchDTO.setTournamentName(match.getTournament().getName());
        } else {
            matchDTO.setTournamentId(null);
            matchDTO.setTournamentName("Unknown Tournament");
        }

        return matchDTO;
    }
}
