package com.cricket.ncasports.service;

import com.cricket.ncasports.dto.MatchDTO;
import com.cricket.ncasports.model.Match;
import com.cricket.ncasports.model.Player;
import com.cricket.ncasports.model.Tournament;
import com.cricket.ncasports.repository.MatchRepository;
import com.cricket.ncasports.repository.PlayerRepository;
import com.cricket.ncasports.repository.TournamentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class MatchService {

    private final MatchRepository matchRepository;
    private final TournamentRepository tournamentRepository;
    private final PlayerRepository playerRepository;

    @Autowired
    public MatchService(MatchRepository matchRepository, TournamentRepository tournamentRepository, PlayerRepository playerRepository) {
        this.matchRepository = matchRepository;
        this.tournamentRepository = tournamentRepository;
        this.playerRepository = playerRepository;
    }

    // Get all matches as MatchDTO
    public List<MatchDTO> getAllMatchesAsDTO() {
        return matchRepository.findAll().stream()
                .map(this::convertToMatchDTO)
                .collect(Collectors.toList());
    }

    // Get match by ID
    public Optional<MatchDTO> getMatchById(Long id) {
        Optional<Match> match = matchRepository.findById(id);
        return match.map(this::convertToMatchDTO);
    }

    // Create a new match and return MatchDTO
    public MatchDTO createMatch(MatchDTO matchDTO) {
        Optional<Tournament> tournament = tournamentRepository.findById(matchDTO.getTournamentId());
        if (tournament.isEmpty()) {
            throw new IllegalArgumentException("Tournament with ID " + matchDTO.getTournamentId() + " not found.");
        }

        Match match = new Match();
        match.setTeamA(matchDTO.getTeamA());
        match.setTeamB(matchDTO.getTeamB());
        match.setScheduledDate(matchDTO.getScheduledDate());
        match.setTournament(tournament.get());  // Associate the tournament
        match.setTossWinner(matchDTO.getTossWinner()); // Set toss winner
        match.setBattingTeam(matchDTO.getBattingTeam()); // Set batting team after toss
        match.setBowlingTeam(matchDTO.getBowlingTeam()); // Set bowling team after toss

        // Handle Playing 11 for each team
        List<Player> teamAPlayers = playerRepository.findAllById(matchDTO.getTeamAPlayers()); 
        List<Player> teamBPlayers = playerRepository.findAllById(matchDTO.getTeamBPlayers());
        
        match.setTeamAPlayers(teamAPlayers); // Set Team A players
        match.setTeamBPlayers(teamBPlayers); // Set Team B players

        match = matchRepository.save(match); // Save the match

        return convertToMatchDTO(match); // Convert back to DTO and return
    }

    // Delete match by ID
    public void deleteMatch(Long id) {
        matchRepository.deleteById(id);
    }

    // Convert Match entity to MatchDTO
    public MatchDTO convertToMatchDTO(Match match) {
        MatchDTO matchDTO = new MatchDTO();
        matchDTO.setId(match.getId());
        matchDTO.setTeamA(match.getTeamA());
        matchDTO.setTeamB(match.getTeamB());
        matchDTO.setScheduledDate(match.getScheduledDate());
        matchDTO.setTossWinner(match.getTossWinner()); // Include Toss Winner in DTO
        matchDTO.setBattingTeam(match.getBattingTeam()); // Include Batting Team in DTO
        matchDTO.setBowlingTeam(match.getBowlingTeam()); // Include Bowling Team in DTO

        if (match.getTournament() != null) {
            matchDTO.setTournamentId(match.getTournament().getId());
            matchDTO.setTournamentName(match.getTournament().getName());
        }

        // Add players from both teams to the DTO
        matchDTO.setTeamAPlayers(match.getTeamAPlayers().stream()
                .map(Player::getName) // Assume Player has a getName() method
                .collect(Collectors.toList()));
        matchDTO.setTeamBPlayers(match.getTeamBPlayers().stream()
                .map(Player::getName)
                .collect(Collectors.toList()));

        return matchDTO;
    }
}
