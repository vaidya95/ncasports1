package com.cricket.ncasports.service;

import com.cricket.ncasports.dto.MatchDTO;
import com.cricket.ncasports.dto.PlayerRoleDTO;
import com.cricket.ncasports.model.Match;
import com.cricket.ncasports.model.Player;
import com.cricket.ncasports.model.PlayerRole;
import com.cricket.ncasports.model.Role;
import com.cricket.ncasports.model.Tournament;
import com.cricket.ncasports.repository.MatchRepository;
import com.cricket.ncasports.repository.PlayerRepository;
import com.cricket.ncasports.repository.PlayerRoleRepository;
import com.cricket.ncasports.repository.TournamentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class MatchService {

    private final MatchRepository matchRepository;
    private final PlayerRepository playerRepository;
    private final PlayerRoleRepository playerRoleRepository;
    private final TournamentRepository tournamentRepository;

    @Autowired
    public MatchService(MatchRepository matchRepository, PlayerRepository playerRepository,
                        PlayerRoleRepository playerRoleRepository, TournamentRepository tournamentRepository) {
        this.matchRepository = matchRepository;
        this.playerRepository = playerRepository;
        this.playerRoleRepository = playerRoleRepository;
        this.tournamentRepository = tournamentRepository;
    }

    // Get all matches as MatchDTO
    public List<MatchDTO> getAllMatchesAsDTO() {
        return matchRepository.findAll().stream()
                .map(this::convertToMatchDTO)
                .collect(Collectors.toList());
    }

    // Get match by ID
    public Optional<MatchDTO> getMatchById(Long id) {
        Optional<Match> match = matchRepository.findById(id);
        return match.map(this::convertToMatchDTO);
    }

    // Create a new match
    public MatchDTO createMatch(MatchDTO matchDTO) {
        // Fetch tournament by ID
        Tournament tournament = tournamentRepository.findById(matchDTO.getTournamentId())
                .orElseThrow(() -> new IllegalArgumentException("Tournament not found"));

        // Create Match object
        Match match = new Match();
        match.setTeamA(matchDTO.getTeamA());
        match.setTeamB(matchDTO.getTeamB());
        match.setScheduledDate(matchDTO.getScheduledDate());
        match.setTossWinner(matchDTO.getTossWinner());
        match.setTossDecision(matchDTO.getTossDecision());
        match.setTournament(tournament);

        // Create player roles
        List<PlayerRole> playerRoles = matchDTO.getPlayerRoles().stream()
                .map(playerRoleDTO -> {
                    // Create or fetch the player
                    Player player = playerRepository.findByName(playerRoleDTO.getPlayerName())
                            .orElseGet(() -> {
                                Player newPlayer = new Player();
                                newPlayer.setName(playerRoleDTO.getPlayerName());
                                playerRepository.save(newPlayer);
                                return newPlayer;
                            });

                    // Create PlayerRole
                    PlayerRole playerRole = new PlayerRole();
                    playerRole.setPlayer(player);
                    playerRole.setRole(playerRoleDTO.getRole().toString()); // Using Role enum
                    playerRole.setMatch(match);
                    return playerRole;
                })
                .collect(Collectors.toList());

        match.setPlayerRoles(playerRoles);

        // Save match
        match = matchRepository.save(match);

        return convertToMatchDTO(match);
    }

    // Update the match
    public MatchDTO updateMatch(Long id, MatchDTO matchDTO) {
        // Find the existing match
        Match match = matchRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Match not found"));

        // Update match details
        match.setTeamA(matchDTO.getTeamA());
        match.setTeamB(matchDTO.getTeamB());
        match.setScheduledDate(matchDTO.getScheduledDate());
        match.setTossWinner(matchDTO.getTossWinner());
        match.setTossDecision(matchDTO.getTossDecision());

        // Update player roles
        List<PlayerRole> playerRoles = matchDTO.getPlayerRoles().stream()
                .map(playerRoleDTO -> {
                    // Fetch the player
                    Player player = playerRepository.findByName(playerRoleDTO.getPlayerName())
                            .orElseGet(() -> {
                                Player newPlayer = new Player();
                                newPlayer.setName(playerRoleDTO.getPlayerName());
                                playerRepository.save(newPlayer);
                                return newPlayer;
                            });

                    // Create or update PlayerRole
                    PlayerRole playerRole = new PlayerRole();
                    playerRole.setPlayer(player);
                    playerRole.setRole(playerRoleDTO.getRole().toString());
                    playerRole.setMatch(match);
                    return playerRole;
                })
                .collect(Collectors.toList());

        match.setPlayerRoles(playerRoles);

        // Save updated match
        match = matchRepository.save(match);

        return convertToMatchDTO(match);
    }

    // Delete the match
    public void deleteMatch(Long id) {
        matchRepository.deleteById(id);
    }

    // Convert Match entity to MatchDTO
    private MatchDTO convertToMatchDTO(Match match) {
        MatchDTO matchDTO = new MatchDTO();
        matchDTO.setId(match.getId());
        matchDTO.setTeamA(match.getTeamA());
        matchDTO.setTeamB(match.getTeamB());
        matchDTO.setScheduledDate(match.getScheduledDate());
        matchDTO.setTossWinner(match.getTossWinner());
        matchDTO.setTossDecision(match.getTossDecision());
        matchDTO.setTournamentId(match.getTournament().getId());
        matchDTO.setTournamentName(match.getTournament().getName());

        // Convert player roles to DTO
        List<PlayerRoleDTO> playerRoleDTOs = match.getPlayerRoles().stream()
                .map(playerRole -> {
                    PlayerRoleDTO dto = new PlayerRoleDTO();
                    dto.setPlayerName(playerRole.getPlayer().getName());
                    dto.setRole(playerRole.getRole());
                    return dto;
                })
                .collect(Collectors.toList());
        matchDTO.setPlayerRoles(playerRoleDTOs);

        return matchDTO;
    }
}
